generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")

}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  bookings  Booking[]
  meetings  Meeting[]
}

model Slot {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  status    String // Status field added
  createdAt DateTime @default(now())

  // Relation to Booking
  bookings Booking[] // No need for @relation here

  // Unique constraint on startTime and endTime
  @@unique([startTime, endTime])
}

model Booking {
  id            Int       @id @default(autoincrement())
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  slotId        Int
  slot          Slot      @relation(fields: [slotId], references: [id], onDelete: Cascade)
  zoomMeetingId String? // Field for Zoom meeting ID
  status        String
  createdAt     DateTime  @default(now())
  meetings      Meeting[] // No need for @relation here

  @@index([userId], name: "booking_user_id_index")
}

model Meeting {
  id        Int      @id @default(autoincrement())
  topic     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  meetingId String   @unique // Assuming Zoom meeting ID is a string
  bookingId Int
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  startTime DateTime
  duration  Int

  @@index([userId], name: "meeting_user_id_index")
}
